---
- name: Install Docker and Configure Docker Swarm
  hosts: docker_servers
  become: yes
  become_user: root
  tasks:
    - name: Install Docker on all docker_servers
      shell: curl https://get.docker.com | bash
      when: not ansible_check_mode
    
    - name: Verify Docker service (check mode)
      ansible.builtin.debug:
        msg: "Would verify Docker service installation and status"
      when: ansible_check_mode
      changed_when: false

    - name: Check Docker service logs
      ansible.builtin.command: journalctl -u docker --no-pager -n 50
      register: docker_logs
      ignore_errors: yes
      changed_when: false
      when: not ansible_check_mode
    - debug:
        var: docker_logs.stdout

    - name: Show Docker logs
      ansible.builtin.debug:
        var: docker_logs.stdout
      when: not ansible_check_mode and docker_logs.stdout | length > 0

    - name: Check systemd status (actual run only)
      ansible.builtin.command: systemctl status docker --no-pager
      register: docker_status
      ignore_errors: yes
      changed_when: false
      when: not ansible_check_mode
    - debug:
        var: docker_status.stdout

    - name: Ensure Docker is started and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes
      when: not ansible_check_mode
    
    - name: Wait for Docker daemon to be ready (actual run only)
      ansible.builtin.command: docker info
      register: docker_ready
      until: docker_ready.rc == 0
      retries: 10
      delay: 5
      changed_when: false
      when: not ansible_check_mode

    - name: Add ubuntu user to docker group
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Pause for a few seconds
      ansible.builtin.pause:
        seconds: 10
      when: not ansible_check_mode

    - name: Check Docker Version
      ansible.builtin.shell: docker version --format '{{ '{{' }}.Server.Version{{ '}}' }}'
      register: docker_version
      changed_when: false
      when: not ansible_check_mode
    - name: Show Docker version
      ansible.builtin.debug:
        msg: "Docker version: {{ docker_version.stdout }}"
      when: not ansible_check_mode and docker_version.stdout | length > 0

    - name: Check Docker service status again
      ansible.builtin.command: systemctl is-active docker
      register: docker_status
      check_mode: no
      ignore_errors: yes
      until: docker_status.stdout == "active"
      retries: 5
      delay: 3
      changed_when: false
      when: not ansible_check_mode
  tags:
    - install

- name: Enable Docker Swarm
  hosts: docker_master
  become: yes
  become_user: root
  tasks:
    - name: Enable Docker Swarm on Master docker_servers
      shell: docker swarm init --advertise-addr "{{ ansible_default_ipv4.address }}"
      ignore_errors: yes
    - name: Get Docker Worker Token
      shell: docker swarm join-token -q worker
      register: token
    - set_fact:
        swarm_token: "{{ token.stdout }}"
    - debug:
        var: token.stdout
      no_log: true
    - name: Get Docker Manager Token
      shell: docker swarm join-token -q manager
      register: managertoken
    - set_fact:
        swarmmanager_token: "{{ managertoken.stdout }}"
    - debug:
        var: swarmmanager_token.stdout
      no_log: true
    - name: Get Docker Master Private IP
      shell: "hostname -I | awk '{print $1}'"
      register: private_ip
    - set_fact:
        swarm_ip: "{{ private_ip.stdout }}"
    - debug:
        var: private_ip.stdout
    - name: add variables to dummy host 1
      add_host:
        name: "docker_master_node_token"
        shared_variable: "{{ swarm_token }}"
    - name: add variables to dummy host 3
      add_host:
        name: "docker_master_node_ip"
        shared_variable: "{{ swarm_ip }}"
    - name: add variables to dummy host 4
      add_host:
        name: "docker_master_managernode_token"
        shared_variable: "{{ swarmmanager_token }}"
  tags:
    - swarm

- name: Add Workers to Swarm
  hosts: docker_workers
  become: yes
  become_user: root
  vars:
    private_ip: "{{ hostvars['docker_master_node_ip']['shared_variable'] }}"
    token: "{{ hostvars['docker_master_node_token']['shared_variable'] }}"
  tasks:
    - debug:
        var: token
      no_log: true
    - debug:
        var: private_ip
    - name: Add Workers to Swarm
      shell: docker swarm join --token "{{ token }}" "{{ private_ip }}":2377
      ignore_errors: yes
  tags:
    - workers

- name: Add Managers to Swarm
  hosts: docker_managers
  become: yes
  become_user: root
  vars:
    private_ip: "{{ hostvars['docker_master_node_ip']['shared_variable'] }}"
    token: "{{ hostvars['docker_master_managernode_token']['shared_variable'] }}"
  tasks:
    - debug:
        var: token
      no_log: true
    - debug:
        var: private_ip
    - name: Add Managers to Swarm
      shell: docker swarm join --token "{{ token }}" "{{ private_ip }}":2377
      ignore_errors: yes
  tags:
    - managers

- name: Deploy Voting App Microservices
  hosts: docker_master
  become: yes
  become_user: root
  vars:
    private_ip: "{{ hostvars['docker_master_node_ip']['shared_variable'] }}"
  tasks:
    - name: Clean up any existing services
      shell: |
        docker service rm vote result worker redis db || true
      ignore_errors: yes

    # - name: Create network for voting app
    #   shell: docker network create --driver overlay voting_network
    #   ignore_errors: yes

    # - name: Deploy Redis service
    #   shell: |
    #     docker service create \
    #       --name redis \
    #       --network voting_network \
    #       --replicas 1 \
    #       redis:alpine
    #   ignore_errors: yes

    - name: Deploy Postgres database
      shell: |
        docker service create \
          --name db \
          --network voting_network \
          --replicas 1 \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_USER=postgres \
          --mount type=volume,source=db-data,target=/var/lib/postgresql/data \
          postgres:9.4
      ignore_errors: yes

    - name: Deploy Voting UI
      shell: |
        docker service create \
          --name vote \
          --network voting_network \
          --replicas 3 \
          -p 5000:80 \
          dockersamples/examplevotingapp_vote:latest

    - name: Deploy Worker service
      shell: |
        docker service create \
          --name worker \
          --network voting_network \
          --replicas 1 \
          dockersamples/examplevotingapp_worker:latest

    - name: Deploy Results UI
      shell: |
        docker service create \
          --name result \
          --network voting_network \
          --replicas 1 \
          -p 5001:80 \
          dockersamples/examplevotingapp_result:latest

    - name: Verify services are running
      shell: docker service ls
      register: services
    - debug:
        var: services.stdout

    - name: Print access URLs
      shell: |
        echo "Voting UI: http://{{ private_ip }}:5000" && \
        echo "Results UI: http://{{ private_ip }}:5001"
      register: app_urls
    - debug:
        var: app_urls.stdout
  tags:
    - managers